2024-07-01 08:54:53,407 INFO  [main] com.amrut.prabhu.oauth2.client.SpringOauth2ClientApplication : Starting SpringOauth2ClientApplication using Java 17.0.9 on DIENNT-TGG with PID 8196 (C:\NTD_GDRIVE\PHATRIEN032024\diennt-project\gateway-spring-cloud-keycloak-oauth2\target\classes started by Admin in C:\NTD_GDRIVE\PHATRIEN032024\diennt-project\gateway-spring-cloud-keycloak-oauth2)
2024-07-01 08:54:53,438 INFO  [main] com.amrut.prabhu.oauth2.client.SpringOauth2ClientApplication : No active profile set, falling back to 1 default profile: "default"
2024-07-01 08:54:54,116 INFO  [main] org.springframework.cloud.context.scope.GenericScope : BeanFactory id=eb8751b4-7bba-35a1-b7d2-9bb64ca4df30
2024-07-01 08:54:54,170 INFO  [main] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2024-07-01 08:54:54,172 INFO  [main] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactorDeferringLoadBalancerFilterConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactorDeferringLoadBalancerFilterConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2024-07-01 08:54:54,173 INFO  [main] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker : Bean 'reactorDeferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2024-07-01 08:54:55,345 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [After]
2024-07-01 08:54:55,346 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [Before]
2024-07-01 08:54:55,346 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [Between]
2024-07-01 08:54:55,346 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [Cookie]
2024-07-01 08:54:55,347 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [Header]
2024-07-01 08:54:55,347 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [Host]
2024-07-01 08:54:55,347 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [Method]
2024-07-01 08:54:55,347 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [Path]
2024-07-01 08:54:55,348 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [Query]
2024-07-01 08:54:55,348 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [ReadBody]
2024-07-01 08:54:55,348 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [RemoteAddr]
2024-07-01 08:54:55,348 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [XForwardedRemoteAddr]
2024-07-01 08:54:55,348 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [Weight]
2024-07-01 08:54:55,348 INFO  [main] org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [CloudFoundryRouteService]
2024-07-01 08:54:55,613 INFO  [main] org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver : Exposing 18 endpoint(s) beneath base path '/actuator'
2024-07-01 08:54:55,705 INFO  [main] org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration : Eureka HTTP Client uses RestTemplate.
2024-07-01 08:54:55,739 WARN  [main] org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger : Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2024-07-01 08:54:55,755 INFO  [main] org.springframework.cloud.netflix.eureka.InstanceInfoFactory : Setting initial instance status as: STARTING
2024-07-01 08:54:55,796 INFO  [main] com.netflix.discovery.DiscoveryClient : Initializing Eureka in region us-east-1
2024-07-01 08:54:55,800 INFO  [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2024-07-01 08:54:55,814 INFO  [main] com.netflix.discovery.DiscoveryClient : Disable delta property : false
2024-07-01 08:54:55,814 INFO  [main] com.netflix.discovery.DiscoveryClient : Single vip registry refresh property : null
2024-07-01 08:54:55,814 INFO  [main] com.netflix.discovery.DiscoveryClient : Force full registry fetch : false
2024-07-01 08:54:55,814 INFO  [main] com.netflix.discovery.DiscoveryClient : Application is null : false
2024-07-01 08:54:55,815 INFO  [main] com.netflix.discovery.DiscoveryClient : Registered Applications size is zero : true
2024-07-01 08:54:55,815 INFO  [main] com.netflix.discovery.DiscoveryClient : Application version is -1: true
2024-07-01 08:54:55,815 INFO  [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka server
2024-07-01 08:54:56,037 INFO  [main] com.netflix.discovery.DiscoveryClient : The response status is 200
2024-07-01 08:54:56,039 INFO  [main] com.netflix.discovery.DiscoveryClient : Starting heartbeat executor: renew interval is: 20
2024-07-01 08:54:56,041 INFO  [main] com.netflix.discovery.InstanceInfoReplicator : InstanceInfoReplicator onDemand update allowed rate per min is 4
2024-07-01 08:54:56,044 INFO  [main] com.netflix.discovery.DiscoveryClient : Discovery Client initialized at timestamp 1719798896044 with initial instances count: 0
2024-07-01 08:54:56,045 INFO  [main] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry : Registering application GATEWAY with eureka with status UP
2024-07-01 08:54:56,046 INFO  [main] com.netflix.discovery.DiscoveryClient : Saw local status change event StatusChangeEvent [timestamp=1719798896046, current=UP, previous=STARTING]
2024-07-01 08:54:56,048 WARN  [main] com.netflix.discovery.InstanceInfoReplicator : Ignoring onDemand update due to rate limiter
2024-07-01 08:54:56,048 INFO  [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_GATEWAY/host.docker.internal:9090: registering service...
2024-07-01 08:54:56,140 INFO  [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_GATEWAY/host.docker.internal:9090 - registration status: 204
2024-07-01 08:54:56,174 INFO  [main] org.springframework.boot.web.embedded.netty.NettyWebServer : Netty started on port 9090
2024-07-01 08:54:56,175 INFO  [main] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration : Updating port to 9090
2024-07-01 08:54:56,260 INFO  [main] com.amrut.prabhu.oauth2.client.SpringOauth2ClientApplication : Started SpringOauth2ClientApplication in 3.232 seconds (JVM running for 3.491)
2024-07-01 08:55:26,053 INFO  [DiscoveryClient-CacheRefreshExecutor-0] com.netflix.discovery.DiscoveryClient : Disable delta property : false
2024-07-01 08:55:26,055 INFO  [DiscoveryClient-CacheRefreshExecutor-0] com.netflix.discovery.DiscoveryClient : Single vip registry refresh property : null
2024-07-01 08:55:26,056 INFO  [DiscoveryClient-CacheRefreshExecutor-0] com.netflix.discovery.DiscoveryClient : Force full registry fetch : false
2024-07-01 08:55:26,057 INFO  [DiscoveryClient-CacheRefreshExecutor-0] com.netflix.discovery.DiscoveryClient : Application is null : false
2024-07-01 08:55:26,059 INFO  [DiscoveryClient-CacheRefreshExecutor-0] com.netflix.discovery.DiscoveryClient : Registered Applications size is zero : true
2024-07-01 08:55:26,060 INFO  [DiscoveryClient-CacheRefreshExecutor-0] com.netflix.discovery.DiscoveryClient : Application version is -1: false
2024-07-01 08:55:26,061 INFO  [DiscoveryClient-CacheRefreshExecutor-0] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka server
2024-07-01 08:55:26,094 INFO  [DiscoveryClient-CacheRefreshExecutor-0] com.netflix.discovery.DiscoveryClient : The response status is 200
2024-07-01 08:59:55,817 INFO  [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2024-07-01 09:04:55,833 INFO  [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2024-07-01 09:09:55,840 INFO  [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2024-07-01 09:14:55,850 INFO  [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2024-07-01 09:19:55,856 INFO  [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2024-07-01 09:24:55,862 INFO  [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
